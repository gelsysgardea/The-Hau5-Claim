from datetime import datetime
import re
import sys
import asyncio
from typing import Optional, Dict, List, Union

from telethon import TelegramClient, events, Button
from telethon.tl.types import User, Chat, Channel
from telethon.sync import TelegramClient as SyncTelegramClient

# custom_print is imported before Config to be available for error messages
from source import custom_print
from lib.manipulator import ManipulateToken
# Config import is now handled within __init__ to allow custom_print to be used for errors

class BaseClient:
    def __init__(self):
        try:
            from source.config import Config
            self.config: Config = Config()
            
            # Mostrar configuraci√≥n cargada (sin datos sensibles)
            print("üîß Configuraci√≥n cargada:")
            print(f"- API_ID: {'*' * 8}{str(self.config.API_ID)[-2:] if self.config.API_ID else 'No configurado'}")
            print(f"- ADMIN_CHAT_ID: {self.config.ADMIN_CHAT_ID}")
            print(f"- BOT_TOKEN: {'*' * 10}{self.config.BOT_TOKEN[-5:] if self.config.BOT_TOKEN else 'No configurado'}")
            print("-" * 50)
            
            # Patrones para detectar c√≥digos en diferentes formatos
            self.code_patterns = [
                r'\b[A-Z0-9]{8,10}\b',  # C√≥digos de 8-10 caracteres alfanum√©ricos
                r'(?i)code:?\s*([A-Z0-9]{8,10})',  # Formato "Code: ABC12345"
                r'üîë\s*Code:?\s*([A-Z0-9]{8,10})',  # Formato con emoji de llave
                r'redpack(et)?\s*code:?\s*([A-Z0-9]{8,10})',  # Formato "Redpack code: ABC12345"
                r'\n([A-Z0-9]{8,10})\n',  # C√≥digo en una l√≠nea por s√≠ solo
                r'([A-Z0-9]{4}[ -]?[A-Z0-9]{4})'  # C√≥digos con gui√≥n o espacio en medio
            ]
            
        except ImportError:
            custom_print("Error: Configuration file 'source/config.py' not found. Please copy 'source/config.example.py' to 'source/config.py' and fill in your details.", "error")
            sys.exit(1)
        except SyntaxError as e:
            custom_print(f"Error: Configuration file 'source/config.py' contains syntax errors: {e}", "error")
            sys.exit(1)
        except Exception as e:
            custom_print(f"Error loading configuration: {e}", "error")
            sys.exit(1)
            
    def extract_codes(self, text):
        """Extrae c√≥digos de 8 caracteres alfanum√©ricos en may√∫sculas"""
        if not text or not isinstance(text, str):
            return set()
            
        # Buscar secuencias de exactamente 8 caracteres alfanum√©ricos en may√∫sculas
        codes = set(re.findall(r'\b([A-Z0-9]{8})\b', text.upper()))
        
        # Si no se encontraron c√≥digos de 8 caracteres, buscar c√≥digos de 8-10 caracteres
        if not codes:
            codes = set(re.findall(r'\b([A-Z0-9]{8,10})\b', text.upper()))
        
        # Registrar los c√≥digos encontrados
        if codes:
            self.log(f"üîç C√≥digos detectados: {', '.join(codes)}", "debug")
        else:
            self.log("No se encontraron c√≥digos en el mensaje", "debug")
            
        return codes
        
    def log(self, message, level="info"):
        """Funci√≥n de registro unificada"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] [{level.upper()}] {message}")
        
    async def initialize_client(self):
        """Inicializa el cliente de Telegram"""
        try:
            # Inicializar el cliente de Telegram con el bot token
            self.client = TelegramClient(
                'bot_session',
                self.config.API_ID,
                self.config.API_HASH
            )
            
            # Iniciar la conexi√≥n
            await self.client.start(bot_token=self.config.BOT_TOKEN)
            
            # Obtener informaci√≥n del bot
            me = await self.client.get_me()
            self.log(f"‚úÖ Conectado como @{me.username} (ID: {me.id})", "success")
            
            # Inicializar el manipulador de tokens
            self.manipulator = ManipulateToken(self.config, self)
            self.manipulator._load_successful_claims()
            
            # Estado del bot
            self.is_monitoring_active = True
            self.auto_claim_active = True
            self.chat_ids = set()
            
            # Configurar manejadores
            self.setup_command_handlers()
            self.setup_event_handler()
            
            # Configurar comandos del bot
            await self.setup_bot_commands()
            
            # Registrar que el bot est√° listo
            self.log("üîç Modo de monitoreo universal ACTIVADO", "info")
            self.log("ü§ñ Bot listo para detectar c√≥digos en TODOS los chats", "info")
            self.log("üëÄ Monitoreando mensajes entrantes...", "info")
            
            # Notificar al administrador
            await self.send_admin_notification(
                "ü§ñ *Bot iniciado correctamente*\n"
                "El bot est√° listo para monitorear c√≥digos."
            )
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Error al inicializar el cliente de Telegram: {str(e)}", "error")
            return False

    async def get_chats(self):
        """Maneja la configuraci√≥n de los chats a monitorear para bots"""
        try:
            custom_print("Configurando chats para monitoreo...\n", "info")
            
            # Limpiar la lista de chats monitoreados
            self.chat_ids = set()
            
            # Obtener el ID del chat actual (donde se ejecut√≥ el comando)
            chat_id = self.config.ADMIN_CHAT_ID  # Asumimos que est√° configurado en config.py
            
            if not chat_id:
                custom_print("Error: No se ha configurado un chat de administrador. Por favor, configura ADMIN_CHAT_ID en config.py", "error")
                return
            
            # Agregar el chat actual a la lista de monitoreo
            self.chat_ids.add(chat_id)
            
            # Obtener informaci√≥n del chat
            try:
                chat = await self.client.get_entity(chat_id)
                chat_title = getattr(chat, 'title', 'Chat privado')
                custom_print(f"\n=== CHAT SELECCIONADO ===", "success")
                custom_print(f"- {chat_title} (ID: {chat_id})", "success")
                custom_print("\nEl bot ahora est√° monitoreando este chat.", "success")
                
                # Enviar mensaje de confirmaci√≥n
                await self.client.send_message(
                    chat_id,
                    "‚úÖ Bot configurado correctamente. Ahora estoy monitoreando este chat para c√≥digos de criptocajas."
                    "\n\nEnv√≠a /help para ver los comandos disponibles."
                )
                
            except Exception as e:
                custom_print(f"Error al obtener informaci√≥n del chat: {str(e)}", "error")
            
        except Exception as e:
            custom_print(f"Error al configurar los chats: {str(e)}", "error")



    async def process_message(self, event):
        """Procesa un mensaje entrante"""
        try:
            # Obtener informaci√≥n del mensaje
            message = event.message
            chat = await event.get_chat()
            sender = await event.get_sender()
            
            # Ignorar mensajes propios
            if hasattr(sender, 'is_self') and sender.is_self:
                return
                
            # Obtener el ID del chat y el nombre
            chat_id = chat.id
            chat_title = getattr(chat, 'title', 'Chat privado')
            
            # Extraer el texto del mensaje
            text = message.text or message.raw_text or ''
            
            # Extraer c√≥digos del mensaje
            codes = self.extract_codes(text)
            
            if codes:
                custom_print(f"üì® Mensaje de {chat_title} (ID: {chat_id}): {text}", "debug")
                custom_print(f"üîç C√≥digos detectados: {', '.join(codes)}", "success")
                
                # Procesar cada c√≥digo encontrado
                for code in codes:
                    try:
                        custom_print(f"üîß Procesando c√≥digo: {code}", "info")
                        # Usar el manipulador para procesar el c√≥digo
                        await self.manipulator.main(code)
                        # Peque√±a pausa entre c√≥digos
                        await asyncio.sleep(1)
                    except Exception as e:
                        custom_print(f"Error al procesar c√≥digo {code}: {str(e)}", "error")
            
            return True
            
        except Exception as e:
            custom_print(f"Error al procesar mensaje: {str(e)}", "error")
            return False
            
    # Eliminado el manejador duplicado de mensajes

    def setup_event_handler(self):
        """Configura el manejador de eventos para mensajes"""
        @self.client.on(events.NewMessage())
        async def message_handler(event):
            try:
                # Obtener el texto del mensaje
                message_text = event.raw_text or ''
                
                # Registrar informaci√≥n del mensaje
                self.log(f"\nüì® Mensaje recibido en chat ID: {event.chat_id}", "debug")
                self.log(f"üë§ Remitente ID: {event.sender_id}", "debug")
                self.log(f"üìù Contenido: {message_text}", "debug")
                
                # Ignorar mensajes propios
                if hasattr(event.sender, 'is_self') and event.sender.is_self:
                    self.log("Ignorando mensaje propio", "debug")
                    return
                    
                # Ignorar mensajes de canales an√≥nimos
                if hasattr(event.sender, 'id') and event.sender.id == 777000:
                    self.log("Ignorando mensaje de canal an√≥nimo", "debug")
                    return
                
                # Verificar si el mensaje es relevante (contiene texto)
                if not message_text.strip():
                    self.log("Mensaje vac√≠o, ignorando", "debug")
                    return
                
                # Buscar c√≥digos en el mensaje
                codes = self.extract_codes(message_text)
                
                if codes:
                    # Filtrar c√≥digos ya procesados
                    filtered_codes = []
                    for code in codes:
                        if code in self.manipulator.permanently_claimed_codes:
                            self.log(f"üîç C√≥digo ya procesado: {code}", "debug")
                            continue
                        if code in self.manipulator.processed_tokens:
                            self.log(f"üîç C√≥digo ya procesado en esta sesi√≥n: {code}", "debug")
                            continue
                        filtered_codes.append(code)
                    
                    if not filtered_codes:
                        self.log("üîç Todos los c√≥digos ya han sido procesados anteriormente", "debug")
                        return
                        
                    self.log(f"üîç C√≥digos nuevos detectados: {', '.join(filtered_codes)}", "info")
                    
                    # Procesar cada c√≥digo encontrado
                    for code in filtered_codes:
                        try:
                            self.log(f"üîß Procesando c√≥digo: {code}", "info")
                            await self.manipulator.main(code)
                            await asyncio.sleep(1)  # Peque√±a pausa entre c√≥digos
                        except Exception as e:
                            self.log(f"Error al procesar c√≥digo {code}: {str(e)}", "error")
                else:
                    self.log("No se encontraron c√≥digos en el mensaje", "debug")
                
                # Procesar mensajes con formato de pregunta/respuesta de Binance
                if 'Answer:' in message_text and 'app.binance.com/uni-qr/cart/' in message_text:
                    self.log("üìù Mensaje de Binance detectado", "debug")
                    try:
                        # Extraer el c√≥digo del enlace
                        code_match = re.search(r'app\.binance\.com/uni-qr/cart/(\d+)', message_text)
                        if code_match:
                            code = code_match.group(1)
                            # Extraer la respuesta (l√≠nea despu√©s de 'Answer:')
                            answer_section = message_text.split('Answer:', 1)[1].strip()
                            # Tomar la primera l√≠nea no vac√≠a como respuesta
                            answer = next((line.strip() for line in answer_section.split('\n') if line.strip()), '')
                            # Limpiar la respuesta de emojis y espacios extra
                            answer = re.sub(r'[^\w\s-]', '', answer).strip()
                            if answer:
                                self.log(f"üîë Procesando c√≥digo de Binance: {code} con respuesta: {answer}", "info")
                                await self.process_code_with_answer(code, answer)
                    except Exception as e:
                        self.log(f"Error al procesar mensaje de Binance: {str(e)}", "error")
                        
            except Exception as e:
                self.log(f"‚ùå Error en el manejador de mensajes: {str(e)}", "error")
                # B√∫squeda de c√≥digos en el mensaje
                try:
                    if not message_text:
                        custom_print("Mensaje vac√≠o, ignorando...", "debug")
                        return
                        
                    # Si es un comando, lo manejamos aparte
                    if message_text.startswith('/'):
                        custom_print(f"Comando detectado: {message_text}", "debug")
                        return
                    
                    # Extraer c√≥digos del mensaje
                    codes = self.extract_codes(message_text)
                    if not codes:
                        custom_print("No se encontraron c√≥digos en el mensaje", "debug")
                        return
                        
                    custom_print(f"üîç C√≥digos detectados en el mensaje: {', '.join(codes)}", "info")
                    
                    # Procesar cada c√≥digo encontrado
                    for code in codes:
                        try:
                            custom_print(f"Procesando c√≥digo: {code}", "info")
                            await self.manipulator.main(code)
                            # Peque√±a pausa entre c√≥digos
                            await asyncio.sleep(1)
                        except Exception as e:
                            custom_print(f"Error al procesar c√≥digo {code}: {str(e)}", "error")
                    return
                    
                    # Mostrar informaci√≥n de depuraci√≥n
                    self.log(f"üîç Analizando mensaje:")
                    self.log(f"{message_text}")
                    
                    # Extraer c√≥digos usando la funci√≥n mejorada
                    valid_tokens = self.extract_codes(message_text)
                    self.log(f"üìã C√≥digos detectados: {valid_tokens}")
                        
                    # Si no se encontraron c√≥digos, salir
                    if not valid_tokens:
                        return
                        
                    # Procesar los c√≥digos encontrados
                    sender_name = "t√≠" if event.sender_id == self.config.ADMIN_CHAT_ID else "un contacto"
                    self.log(f"üì® Mensaje de {sender_name} contiene c√≥digos: {', '.join(valid_tokens)}")
                    
                    # Procesar cada token v√°lido
                    for token in valid_tokens:
                        try:
                            # Verificar si el auto-claim est√° activado
                            if not self.auto_claim_active:
                                self.log(f"Auto-claim desactivado. Ignorando c√≥digo {token}")
                                continue
                                
                            # Procesar el c√≥digo
                            self.log(f"üîç Procesando c√≥digo: {token}")
                            
                            # Enviar confirmaci√≥n al administrador
                            if event.sender_id != self.config.ADMIN_CHAT_ID:
                                await self.client.send_message(
                                    self.config.ADMIN_CHAT_ID,
                                    f"üîç *Nuevo c√≥digo detectado en un chat personal:*\n`{token}`\n\n¬øDeseas reclamarlo? Env√≠a /claim_{token}",
                                    parse_mode='md'
                                )
                            
                            # Procesar el c√≥digo
                            await self.manipulator.main(token)
                            
                            # Peque√±a pausa entre c√≥digos para evitar saturaci√≥n
                            await asyncio.sleep(1)
                            
                        except Exception as e:
                            error_msg = f"Error al procesar token {token}: {str(e)}"
                            self.log(error_msg, "error")
                            try:
                                await self.client.send_message(
                                    self.config.ADMIN_CHAT_ID,
                                    f"‚ùå {error_msg}",
                                    parse_mode='md'
                                )
                            except Exception as send_error:
                                self.log(f"No se pudo enviar mensaje de error: {str(send_error)}", "error")
                except Exception as e:
                    self.log(f"Error al procesar mensaje: {str(e)}", "error")
            
            except Exception as e:
                custom_print(f"Error al procesar mensaje: {str(e)}", "error")

    async def send_admin_notification(self, message: str):
        """Sends a notification message to the admin user."""
        admin_id = getattr(self.config, 'ADMIN_USER_ID', 0)
        if not admin_id or admin_id == 0:
            custom_print(f"Notificaci√≥n para admin no enviada (ADMIN_USER_ID no configurado): {message}", "warning")
            return

        try:
            await self.client.send_message(admin_id, message, parse_mode='md')
            custom_print(f"Notificaci√≥n enviada al admin ({admin_id}): {message}", "info")
        except Exception as e:
            custom_print(f"Error al enviar notificaci√≥n al admin ({admin_id}): {str(e)}", "error")

    async def setup_bot_commands(self):
        """Configura los comandos del bot en BotFather"""
        try:
            # Configurar comandos del bot
            commands = [
                ('start', 'Inicia el bot'),
                ('autoclaim', 'Activa/desactiva el reclamo autom√°tico'),
                ('logs', 'Muestra los registros recientes'),
                ('help', 'Muestra la ayuda'),
                ('stop_bot', 'Detiene el bot'),
                ('restart', 'Reinicia el bot')
            ]
            
            await self.client(functions.bots.SetBotCommandsRequest(
                scope=types.BotCommandScopeDefault(),
                lang_code='es',
                commands=[types.BotCommand(command=cmd, description=desc) for cmd, desc in commands]
            ))
            custom_print("Comandos del bot configurados correctamente", "success")
        except Exception as e:
            custom_print(f"Error configurando comandos del bot: {e}", "error")

    def setup_command_handlers(self):
        """Configura los manejadores de comandos del bot."""
        
        @self.client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            """Maneja el comando /start"""
            # Verificar si el comando viene del administrador
            is_admin = event.sender_id == self.config.ADMIN_CHAT_ID
            
            # Activar el monitoreo si es el administrador
            if is_admin:
                self.is_monitoring_active = True
                self.chat_ids.add(event.chat_id)  # Agregar este chat a los monitoreados
                
            welcome_msg = """
ü§ñ *Bienvenido al Bot de Reclamo de C√≥digos Binance*

üìù *Comandos disponibles:*
/start - Muestra el mensaje de bienvenida
/autoclaim - Activa/desactiva el reclamo autom√°tico
/logs - Muestra los registros recientes
/help - Muestra la ayuda
/stop_bot - Detiene el bot
/restart - Reinicia el bot

üìå *C√≥mo usar:*
- Env√≠a c√≥digos de 8 caracteres para reclamarlos
- Ejemplo: `ABC123XY`

El bot est√° listo para usarse. ¬°Empieza a reclamar c√≥digos!"""
            await event.respond(welcome_msg, parse_mode='Markdown')

        @self.client.on(events.NewMessage(pattern='/autoclaim'))
        async def autoclaim_handler(event):
            """Maneja el comando /autoclaim"""
            # Verificar si el comando viene del administrador
            if event.sender_id != self.config.ADMIN_CHAT_ID:
                await event.respond("‚ùå Solo el administrador puede usar este comando.")
                return
                
            # Cambiar el estado de auto-claim
            self.auto_claim_active = not self.auto_claim_active
            status = "activado ‚úÖ" if self.auto_claim_active else "desactivado ‚õî"
            
            # Si se activa el auto-claim, asegurarse de que el monitoreo tambi√©n est√© activo
            if self.auto_claim_active:
                self.is_monitoring_active = True
                self.chat_ids.add(event.chat_id)
                
                # Mensaje m√°s detallado cuando se activa
                response = (
                    f"üöÄ *RECLAMO AUTOM√ÅTICO ACTIVADO*\n\n"
                    f"üîç El bot ahora buscar√° y canjear√° autom√°ticamente c√≥digos en los mensajes.\n"
                    f"üì° Monitoreo de chats: ACTIVO\n"
                    f"üë§ Chats monitoreados: {len(self.chat_ids)}"
                )
            else:
                # Mensaje cuando se desactiva
                response = (
                    f"‚õî *RECLAMO AUTOM√ÅTICO DESACTIVADO*\n\n"
                    f"El bot ya no canjear√° c√≥digos autom√°ticamente.\n"
                    f"üì° Monitoreo de chats: {'ACTIVO' if self.is_monitoring_active else 'INACTIVO'}"
                )
                
            await event.respond(response, parse_mode='md')
            custom_print(f"Reclamo autom√°tico {status} por {event.sender_id}", "info")
            
            # Si se activ√≥, enviar un mensaje de confirmaci√≥n despu√©s de 2 segundos
            if self.auto_claim_active:
                await asyncio.sleep(2)
                await event.respond("üîç *Modo Auto-Claim activo*\nAhora puedo detectar y canjear c√≥digos autom√°ticamente. Solo env√≠ame los mensajes con c√≥digos y yo me encargar√© del resto. üòä", parse_mode='md')
            
        @self.client.on(events.NewMessage(pattern='/claim_([A-Z0-9]{8})'))
        async def claim_code_handler(event):
            """Maneja el comando para reclamar un c√≥digo manualmente"""
            # Verificar si el comando viene del administrador
            if event.sender_id != self.config.ADMIN_CHAT_ID:
                await event.respond("‚ùå Solo el administrador puede usar este comando.")
                return
                
            # Extraer el c√≥digo del comando
            code = event.pattern_match.group(1)
            
            if not code:
                await event.respond("‚ùå Formato de c√≥digo inv√°lido. Usa: /claim_CODIGO")
                return
                
            await event.respond(f"üîç Intentando reclamar c√≥digo: `{code}`", parse_mode='md')
            
            try:
                # Procesar el c√≥digo
                await self.manipulator.main(code)
                await event.respond(f"‚úÖ C√≥digo `{code}` procesado con √©xito.", parse_mode='md')
            except Exception as e:
                error_msg = f"Error al procesar el c√≥digo {code}: {str(e)}"
                custom_print(error_msg, "error")
                await event.respond(f"‚ùå {error_msg}")

        @self.client.on(events.NewMessage(pattern='/logs'))
        async def logs_handler(event):
            """Maneja el comando /logs"""
            # Aqu√≠ puedes implementar la l√≥gica para mostrar logs
            await event.respond("üìú Mostrando √∫ltimos registros... (funci√≥n en desarrollo)")

        @self.client.on(events.NewMessage(pattern='/help'))
        async def help_command(event):
            """Muestra los comandos disponibles"""
            help_text = (
                "ü§ñ *Comandos disponibles:*\n\n"
                "‚Ä¢ /start - Iniciar el bot\n"
                "‚Ä¢ /autoclaim - Activar/desactivar el canje autom√°tico\n"
                "‚Ä¢ /resumen - Muestra resumen de c√≥digos canjeados\n"
                "‚Ä¢ /stop_bot - Detener el bot\n"
                "‚Ä¢ /restart - Reiniciar el bot\n"
                "‚Ä¢ /help - Muestra este mensaje de ayuda"
            )
            await event.respond(help_text, parse_mode='markdown')
            
        @self.client.on(events.NewMessage(pattern='/resumen'))
        async def summary_command(event):
            """Muestra un resumen de los c√≥digos canjeados"""
            if event.sender_id != self.config.ADMIN_CHAT_ID:
                await event.respond("‚ùå Solo el administrador puede ver el resumen.")
                return
                
            summary = await self.manipulator.get_claim_summary()
            await event.respond(summary, parse_mode='markdown')
            
        # Manejador para c√≥digos en mensajes
        @self.client.on(events.NewMessage())
        async def message_handler(event):
            """Maneja los mensajes que contienen c√≥digos"""
            if not self.is_monitoring_active:
                return
                
            # Buscar c√≥digos en el mensaje
            message_text = event.raw_text.strip()
            tokens = re.findall(r'\b(?!\d+\b)(?![a-z]+\b)[A-Z0-9]{8}\b', message_text.upper())
            
            # Si se encontraron c√≥digos v√°lidos, procesarlos
            for token in tokens:
                custom_print(f"C√≥digo detectado: {token}", "info")
                await self.manipulator.main(token)
                
                # Notificar al usuario
                if event.is_private:
                    await event.respond(f"‚úÖ C√≥digo procesado: `{token}`", parse_mode='Markdown')

    async def process_code_with_answer(self, code: str, answer: str):
        """Procesa un c√≥digo junto con su respuesta (funcionalidad pendiente)"""
        custom_print(f"Received code '{code}' with answer '{answer}'. This feature is pending implementation.", "warning")

    async def start_client(self):
        """Inicia el cliente de Telegram con autenticaci√≥n de usuario"""
        try:
            custom_print("üîë Iniciando sesi√≥n en Telegram...", "info")
            
            # Configurar el cliente con tus credenciales API
            self.client = TelegramClient(
                'user_session',  # Nombre del archivo de sesi√≥n
                self.config.API_ID,
                self.config.API_HASH,
                device_model="PC",
                app_version="1.0.0",
                system_version="Windows 10",
                lang_code="es",
                system_lang_code="es"
            )
            
            # Iniciar sesi√≥n
            await self.client.start(
                phone=lambda: input('\nüì± Por favor ingresa tu n√∫mero de tel√©fono (con c√≥digo de pa√≠s, ej: +521234567890): '),
                code_callback=lambda: input('üîë Ingresa el c√≥digo de verificaci√≥n: '),
                password=lambda: input('üîê Si tienes autenticaci√≥n en dos pasos, ingresa la contrase√±a: ')
            )
            
            # Verificar la sesi√≥n
            me = await self.client.get_me()
            custom_print(f"‚úÖ Sesi√≥n iniciada como {me.first_name} (@{me.username or 'sin_usuario'}) - ID: {me.id}", "success")
            
            # Configurar manejadores
            self.setup_command_handlers()
            self.setup_event_handler()
            
            # Inicializar manipulador de tokens
            self.manipulator = ManipulateToken(self.config, self)
            self.manipulator._load_successful_claims()
            
            # Estado del bot
            self.is_monitoring_active = True
            self.auto_claim_active = True
            self.chat_ids = set()
            
            custom_print("\nü§ñ Bot iniciado correctamente", "info")
            custom_print("üëÄ Monitoreando mensajes entrantes...", "info")
            
            # Mantener la sesi√≥n activa
            await self.client.run_until_disconnected()
            return True
            
        except Exception as e:
            custom_print(f"‚ùå Error al iniciar la sesi√≥n: {str(e)}", "error")
            return False

    async def start_async(self):
        """M√©todo as√≠ncrono para iniciar el cliente"""
        self.log("Iniciando el bot...", "info")
        
        try:
            # Iniciar el cliente de Telegram
            self.log("Conectando al servidor de Telegram...", "info")
            
            # Configurar el cliente con tus credenciales API
            self.client = TelegramClient(
                'user_session',  # Nombre del archivo de sesi√≥n
                self.config.API_ID,
                self.config.API_HASH,
                device_model="PC",
                app_version="1.0.0",
                system_version="Windows 10",
                lang_code="es",
                system_lang_code="es"
            )
            
            # Iniciar sesi√≥n
            await self.client.start(
                phone=lambda: input('\nüì± Por favor ingresa tu n√∫mero de tel√©fono (con c√≥digo de pa√≠s, ej: +521234567890): '),
                code_callback=lambda: input('üîë Ingresa el c√≥digo de verificaci√≥n: '),
                password=lambda: input('üîê Si tienes autenticaci√≥n en dos pasos, ingresa la contrase√±a: ')
            )
            
            # Verificar la sesi√≥n
            me = await self.client.get_me()
            self.log(f"‚úÖ Sesi√≥n iniciada como {me.first_name} (@{me.username or 'sin_usuario'}) - ID: {me.id}", "success")
            
            # Configurar manejadores
            self.setup_command_handlers()
            self.setup_event_handler()
            
            # Inicializar manipulador de tokens
            self.manipulator = ManipulateToken(self.config, self)
            self.manipulator._load_successful_claims()
            
            # Estado del bot
            self.is_monitoring_active = True
            self.auto_claim_active = True
            self.chat_ids = set()
            
            self.log("\nü§ñ Bot iniciado correctamente", "info")
            self.log("üëÄ Monitoreando mensajes entrantes...", "info")
            
            # Mantener la sesi√≥n activa
            await self.client.run_until_disconnected()
            
        except KeyboardInterrupt:
            self.log("\nüõë Bot detenido por el usuario", "info")
        except Exception as e:
            self.log(f"‚ùå Error durante la ejecuci√≥n del bot: {str(e)}", "error")
        finally:
            self.log("üîå Desconectando el bot...", "info")
            if hasattr(self, 'client') and self.client:
                await self.client.disconnect()
    
    def start(self):
        """M√©todo principal s√≠ncrono para iniciar el cliente"""
        try:
            # Crear un nuevo bucle de eventos
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.start_async())
        except Exception as e:
            self.log(f"‚ùå Error al iniciar el bot: {str(e)}", "error")
            import traceback
            traceback.print_exc()  # Imprimir el traceback completo
        finally:
            # Cerrar el bucle de eventos
            loop.close()
